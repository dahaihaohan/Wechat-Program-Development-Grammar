
一、WXML语法规范：
		1.WXML文档里同样属性的开始标签和结束标签必须成对出现，结束标签的组件名称前要有一个斜杠（/）；
		  也可以用<template。。。/>这种标签形式，叫做空元素标签
		2.WXML标签内的属性严格区分大小写，如<text>和<Text>是不同的标签
		3.WXML的注释语句形式是<!--注释内容-->，注释可以是一行或者多行

二、视觉组件
		也就是HTML文件中的“标签”
		组件的描述语法：
				1.关键词用尖括号包围起来，如<view>
				2.关键词通常是成对出现的，如<text>和</text>
				3.组件标签属性中赋值的语法形式是“组件名+属性名+属性值”的形式，
				  属性名与值之间用赋值符号连接，值用双引号括起来，
				  如：<view id="outter" bindtap="handle-Tap1"> 
		
		组件属性的类型：
			Boolean:	
				{
					描述：布尔值
					注释：组件写上该属性，不管该值等于什么，其值都为true，只有组件上没用写该属性时，属性值才为false。
						  如果属性值为变量，变量的值会被转化为Boolean类型
				}
			Number:
				{
					描述：数字
					注释：1，2.5
				}
			String:
				{
					描述：字符串
					注释："string"
				}
			Array:
				{
					描述：数组
					注释：[1,"string"]
				}
			Object:
				{
					描述：对象
					注释：{key: value}
				}
			EventHandler:
				{
					描述：事件处理函数名
					注释："handlerName"是Page中定义的事件处理函数名
				}
			Any:
				{
					描述：任意属性
				}
		
		组件的基本属性：
			id:
				{
					类型：String 	
					描述：组件的唯一标示
					注解：保持整个页面唯一
				}
			class：
				{
					类型：String
					描述：组件的样式类
					注解：在对应的WXSS中定义的样式类
				}
			style:
				{
					类型：String
					描述：组件的内联样式
					注解：可以动态设置内联样式
				}
			hidden:
				{
					类型：Boolean
					描述：组件是否显示
					注解：所有组件默认显示
				}
			data-*:
				{
					类型：Any
					描述：自定义属性
					注解：组件上触发事件时，会发送给事件处理函数
				}
			bind*/catch*:
				{
					类型：EventHandler
					描述：组件的事件
					注解：详见事件
				}

三： 组件的数据绑定：
		使用一种叫做Mustache语法的形式，就是将属性变量用双层花括号（{{}}）括起来的形式进行绑定
			例一：文本内容的绑定
				<!--index.wxml-->
				<view> {{text}} </view>
				//index.js
				Page({
					data:{
						text:'Hello打字学英语!'
					}
				})
			例二：组件属性的绑定。组件属性要放置在双引号内：
				<!--index.wxml-->
				<view id="item-{{say}}"></view>
				//index.js
				Page({
					data:{
						say:"hello,打字学英语";
					}
				})
			例三：控制属性的绑定。控制属性需要放置在双引号内：
				<!--index.wxml-->
				<view wx:if="{{myKey}}"></view>
				//index.js
				Page({
					data:{
						myKey:true
					}
				})
			例四：关键字的绑定。关键字需要放置在双引号内：
				<!--index.wxml-->
				<checkbox checked="{{true}}"></checkbox>
		绑定时的运算：
			数据绑定时，可以在双花括号内进行简单的运算
			如：三元运算，算数运算，逻辑判断，字符串运算，数据路径运算
			
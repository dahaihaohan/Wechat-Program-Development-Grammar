
一、模板
	定义模板的名字使用name属性，然后在<template></template>标签块内定义模块的代码片段
	
	我们使用is属性声明选要使用的模板，然后将模板需要的data数据传入
	
	类似数据绑定，is属性使用Mustache语法来动态决定需要渲染哪个模板

二、事件
	在小程序框架里，视图层到逻辑层的通信方式叫做事件
	
	小程序事件分为冒泡事件和非冒泡事件，这里首先要了解组件的“嵌套”，
	组件的嵌套是指一个组件内部包括一个或者几个其他组件，外部组件叫做内部组件的父节点
	
	当一个组件的事件被触发后，该事件会向父节点传递，这类事件叫做冒泡事件
	反之则为非冒泡事件
	
		WXML的冒泡事件：
			touchstart:
				{
					触发条件：手指触摸动作开始
				}
			touchmove:
				{
					触发条件：手指触摸后移动
				}
			touchcancel
				{
					触发条件：手指触摸动作被打断，如来电提醒、弹窗
				}
			touchend:
				{
					触发条件：手指触摸动作结束
				}
			tap：
				{
					触发条件：手指触摸后马上离开
				}
			longtap:
				{
					触发条件：手指触摸后，超过350ms再离开
				}
		除上述列出的事件外的其他组件自定义事件，如果没有特殊申明都是非冒泡事件		
	事件绑定的写法用key、value对的形式：
		{
			1.key以bind或catch开头，然后跟上事件类型，如bindtap,catchtouchstart
			2.bind事件绑定不会阻止冒泡事件向上冒泡，catch事件绑定后可以阻止
		}
三、事件对象
	当组件触发事件时，逻辑层绑定这个事件的处理函数会收到一个事件对象用于逻辑层的处理
	
	BaseEvent基础事件对象属性：
		type:
			{
				类型：String
				说明：事件类型
			}
		timeStamp:
			{
				类型：Integer
				说明：事件生成时的时间戳
			}
		target:
			{
				类型：Object
				说明：触发事件的组件的一些属性值集合
			}
		currentTarget:
			{
				类型：Object
				说明: 当前组件的一些属性值集合
			}
	CustomEvent自定义事件对象属性（继承自BaseEvent）：
		detail:
			{
				类型：Object
				说明：额外的信息
			}
	TouchEvent触摸事件属性（继承自BaseEvent）：
		touches:
			{
				类型：Array
				说明: 触摸事件，当前停留在屏幕中的触摸点信息的数组
			}
		changedTouches：
			{
				类型：Array	
				说明：触发事件，当前变化的触摸点信息的数组
			}
	target属性：
		id:
			{
				类型：String
				说明：事件源组件的id
			}
		tagName:
			{
				类型：String
				说明：当前组件的类型
			}
		dataset:
			{
				类型：Object
				说明：事件源组件上由data-开头的自定义属性组件的集合
			}
	currentTarget是事件绑定的当前组件
		id：
			{
				类型：String
				说明：当前组件的id
			}
		tagName:
			{
				类型：String
				说明: 当前组件的类型
			}
		dataset:
			{
				类型：Object
				说明：当前组件上由data-开头的自定义属性组件的集合
			}
四、引用
	WXML语言提供import和include两种方式引用其他文件内容
		import:
			可以在该文件中使用目标文件定义的template（模板）
			
			import有作用域的概念，就是只能引用目标文件中定义的template，			
			而不能引用目标文件引用的template，即不能多重引用
		include:
			可以将目标文件除了<template/>外的全部代码引入到当前文件，
			相当与复制了一份目标文件到include位置
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				